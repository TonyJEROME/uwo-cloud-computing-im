# This workflow will build a docker container, publish it to Google Container
# Registry, and deploy it to GKE when there is a push to the "master"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Google Kubernetes Engine (container.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Ensure that your repository contains the necessary configuration for your
#    Google Kubernetes Engine cluster, including deployment.yml,
#    kustomization.yml, service.yml, etc.
#
# 3. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Kubernetes Engine Developer (roles/container.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 5. Change the values in the "env" block to match your values.

name: 'Deploy Database to GKE'

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Choose deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  PROJECT_ID: 'ece9016-452720'
  GAR_LOCATION: 'us-central1'
  GKE_ZONE: 'us-central1-c'
  WORKLOAD_IDENTITY_PROVIDER: 'projects/713996055045/locations/global/workloadIdentityPools/github-action/providers/github-repo'

jobs:
  setup-build-publish-deploy:
    name: 'Setup, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

      - name: Set ENV
        run: |
          echo "DEPLOYMENT_NAME=db" >> $GITHUB_ENV
          echo "DEPLOY_ENV=${{ github.event.inputs.env }}" >> $GITHUB_ENV
          if [[ "${{ github.event.inputs.env }}" == 'prod' ]]; then
            echo "GKE_CLUSTER=webapp" >> $GITHUB_ENV
            echo "SECRET_KEY=713996055045/prod_database_password" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.env }}" == 'dev' ]]; then
            echo "GKE_CLUSTER=webapp-dev" >> $GITHUB_ENV
            echo "SECRET_KEY=713996055045/dev_database_password" >> $GITHUB_ENV
          fi
      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2' # google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'

      # Get the GKE credentials so we can deploy to the cluster
      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@6051de21ad50fbb1767bc93c11357a49082ad116' # google-github-actions/get-gke-credentials@v2
        with:
          project_id: '${{ env.PROJECT_ID }}'
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_ZONE }}'

      - id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            DB_PASSWORD:${{ env.SECRET_KEY }}

      # Set up kustomize
      - name: 'Set up Kustomize'
        run: |-
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: Deploy to Dev Cluster
        if: ${{ env.DEPLOY_ENV == 'dev' }}
        run: |-
          echo "Current Directory: $(pwd)"
          echo "DB_PASSWORD=$DB_PASSWORD" > db-config.env
          kustomize edit add configmap db-config --from-env-file=db-config.env
          ${{ github.workspace }}/kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
        working-directory: ./k8s/overlays/dev/db
        env:
          DB_PASSWORD: ${{ steps.secrets.outputs.DB_PASSWORD }}

      # Deploy the Docker image to the GKE cluster
      - name: Deploy to Prod Cluster
        if: ${{ env.DEPLOY_ENV == 'prod' }}
        run: |-
          echo "Current Directory: $(pwd)"
          echo "DB_PASSWORD=$DB_PASSWORD" > db-config.env
          kustomize edit add configmap db-config --from-env-file=db-config.env
          ${{ github.workspace }}/kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
        working-directory: ./k8s/overlays/prod/db
        env:
          DB_PASSWORD: ${{ steps.secrets.outputs.DB_PASSWORD }}
